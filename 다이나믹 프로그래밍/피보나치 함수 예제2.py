# 다이나믹 프로그래밍 : 큰 문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘
# 한 번 해결했던 문제를 다시금 해결한다는 점이 분할 정복 알고리즘과의 차이
# 탑다운 방식 : 재귀함수를 이용하여 다이나믹 프로그래밍 소스코드를 작성하는 방법. 큰 문제를 해결하여 작은 문제를 호출한다.
# 보텀업 방식 : 반복문을 이용하여 소스코드를 작성하는 방법

# 메모이제이션 : 다이나믹 프로그래밍을 구현하는 방법 중 한 종류
# 한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그래도 가져오는 기법
# 캐싱이라도고 한다.
# 다이나믹 프로그램밍을 적용했을 때 시간복잡도 : O(N)

# 메모리제이션하기 위한 리스트 초기화
d = [0]*100

def fibo(x):
    print('f(' + str(x) + ')', end=' ') # 호출되는 함수 확인
    if x==1 or x==2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x-1) + fibo(x-2)
    return d[x]

print(fibo(99))

